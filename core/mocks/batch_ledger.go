// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/types"
	"github.com/hyperledger/fabric-x-orderer/core"
)

type FakeBatchLedger struct {
	AppendStub        func(types.PartyID, types.BatchSequence, types.BatchedRequests)
	appendMutex       sync.RWMutex
	appendArgsForCall []struct {
		arg1 types.PartyID
		arg2 types.BatchSequence
		arg3 types.BatchedRequests
	}
	HeightStub        func(types.PartyID) uint64
	heightMutex       sync.RWMutex
	heightArgsForCall []struct {
		arg1 types.PartyID
	}
	heightReturns struct {
		result1 uint64
	}
	heightReturnsOnCall map[int]struct {
		result1 uint64
	}
	RetrieveBatchByNumberStub        func(types.PartyID, uint64) types.Batch
	retrieveBatchByNumberMutex       sync.RWMutex
	retrieveBatchByNumberArgsForCall []struct {
		arg1 types.PartyID
		arg2 uint64
	}
	retrieveBatchByNumberReturns struct {
		result1 types.Batch
	}
	retrieveBatchByNumberReturnsOnCall map[int]struct {
		result1 types.Batch
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBatchLedger) Append(arg1 types.PartyID, arg2 types.BatchSequence, arg3 types.BatchedRequests) {
	fake.appendMutex.Lock()
	fake.appendArgsForCall = append(fake.appendArgsForCall, struct {
		arg1 types.PartyID
		arg2 types.BatchSequence
		arg3 types.BatchedRequests
	}{arg1, arg2, arg3})
	stub := fake.AppendStub
	fake.recordInvocation("Append", []interface{}{arg1, arg2, arg3})
	fake.appendMutex.Unlock()
	if stub != nil {
		fake.AppendStub(arg1, arg2, arg3)
	}
}

func (fake *FakeBatchLedger) AppendCallCount() int {
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	return len(fake.appendArgsForCall)
}

func (fake *FakeBatchLedger) AppendCalls(stub func(types.PartyID, types.BatchSequence, types.BatchedRequests)) {
	fake.appendMutex.Lock()
	defer fake.appendMutex.Unlock()
	fake.AppendStub = stub
}

func (fake *FakeBatchLedger) AppendArgsForCall(i int) (types.PartyID, types.BatchSequence, types.BatchedRequests) {
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	argsForCall := fake.appendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBatchLedger) Height(arg1 types.PartyID) uint64 {
	fake.heightMutex.Lock()
	ret, specificReturn := fake.heightReturnsOnCall[len(fake.heightArgsForCall)]
	fake.heightArgsForCall = append(fake.heightArgsForCall, struct {
		arg1 types.PartyID
	}{arg1})
	stub := fake.HeightStub
	fakeReturns := fake.heightReturns
	fake.recordInvocation("Height", []interface{}{arg1})
	fake.heightMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatchLedger) HeightCallCount() int {
	fake.heightMutex.RLock()
	defer fake.heightMutex.RUnlock()
	return len(fake.heightArgsForCall)
}

func (fake *FakeBatchLedger) HeightCalls(stub func(types.PartyID) uint64) {
	fake.heightMutex.Lock()
	defer fake.heightMutex.Unlock()
	fake.HeightStub = stub
}

func (fake *FakeBatchLedger) HeightArgsForCall(i int) types.PartyID {
	fake.heightMutex.RLock()
	defer fake.heightMutex.RUnlock()
	argsForCall := fake.heightArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBatchLedger) HeightReturns(result1 uint64) {
	fake.heightMutex.Lock()
	defer fake.heightMutex.Unlock()
	fake.HeightStub = nil
	fake.heightReturns = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeBatchLedger) HeightReturnsOnCall(i int, result1 uint64) {
	fake.heightMutex.Lock()
	defer fake.heightMutex.Unlock()
	fake.HeightStub = nil
	if fake.heightReturnsOnCall == nil {
		fake.heightReturnsOnCall = make(map[int]struct {
			result1 uint64
		})
	}
	fake.heightReturnsOnCall[i] = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeBatchLedger) RetrieveBatchByNumber(arg1 types.PartyID, arg2 uint64) types.Batch {
	fake.retrieveBatchByNumberMutex.Lock()
	ret, specificReturn := fake.retrieveBatchByNumberReturnsOnCall[len(fake.retrieveBatchByNumberArgsForCall)]
	fake.retrieveBatchByNumberArgsForCall = append(fake.retrieveBatchByNumberArgsForCall, struct {
		arg1 types.PartyID
		arg2 uint64
	}{arg1, arg2})
	stub := fake.RetrieveBatchByNumberStub
	fakeReturns := fake.retrieveBatchByNumberReturns
	fake.recordInvocation("RetrieveBatchByNumber", []interface{}{arg1, arg2})
	fake.retrieveBatchByNumberMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatchLedger) RetrieveBatchByNumberCallCount() int {
	fake.retrieveBatchByNumberMutex.RLock()
	defer fake.retrieveBatchByNumberMutex.RUnlock()
	return len(fake.retrieveBatchByNumberArgsForCall)
}

func (fake *FakeBatchLedger) RetrieveBatchByNumberCalls(stub func(types.PartyID, uint64) types.Batch) {
	fake.retrieveBatchByNumberMutex.Lock()
	defer fake.retrieveBatchByNumberMutex.Unlock()
	fake.RetrieveBatchByNumberStub = stub
}

func (fake *FakeBatchLedger) RetrieveBatchByNumberArgsForCall(i int) (types.PartyID, uint64) {
	fake.retrieveBatchByNumberMutex.RLock()
	defer fake.retrieveBatchByNumberMutex.RUnlock()
	argsForCall := fake.retrieveBatchByNumberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBatchLedger) RetrieveBatchByNumberReturns(result1 types.Batch) {
	fake.retrieveBatchByNumberMutex.Lock()
	defer fake.retrieveBatchByNumberMutex.Unlock()
	fake.RetrieveBatchByNumberStub = nil
	fake.retrieveBatchByNumberReturns = struct {
		result1 types.Batch
	}{result1}
}

func (fake *FakeBatchLedger) RetrieveBatchByNumberReturnsOnCall(i int, result1 types.Batch) {
	fake.retrieveBatchByNumberMutex.Lock()
	defer fake.retrieveBatchByNumberMutex.Unlock()
	fake.RetrieveBatchByNumberStub = nil
	if fake.retrieveBatchByNumberReturnsOnCall == nil {
		fake.retrieveBatchByNumberReturnsOnCall = make(map[int]struct {
			result1 types.Batch
		})
	}
	fake.retrieveBatchByNumberReturnsOnCall[i] = struct {
		result1 types.Batch
	}{result1}
}

func (fake *FakeBatchLedger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	fake.heightMutex.RLock()
	defer fake.heightMutex.RUnlock()
	fake.retrieveBatchByNumberMutex.RLock()
	defer fake.retrieveBatchByNumberMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBatchLedger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.BatchLedger = new(FakeBatchLedger)
