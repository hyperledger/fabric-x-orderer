// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/core"
	"github.com/hyperledger/fabric-x-orderer/node/consensus/state"
)

type FakeStateProvider struct {
	GetLatestStateChanStub        func() <-chan *state.State
	getLatestStateChanMutex       sync.RWMutex
	getLatestStateChanArgsForCall []struct {
	}
	getLatestStateChanReturns struct {
		result1 <-chan *state.State
	}
	getLatestStateChanReturnsOnCall map[int]struct {
		result1 <-chan *state.State
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStateProvider) GetLatestStateChan() <-chan *state.State {
	fake.getLatestStateChanMutex.Lock()
	ret, specificReturn := fake.getLatestStateChanReturnsOnCall[len(fake.getLatestStateChanArgsForCall)]
	fake.getLatestStateChanArgsForCall = append(fake.getLatestStateChanArgsForCall, struct {
	}{})
	stub := fake.GetLatestStateChanStub
	fakeReturns := fake.getLatestStateChanReturns
	fake.recordInvocation("GetLatestStateChan", []interface{}{})
	fake.getLatestStateChanMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStateProvider) GetLatestStateChanCallCount() int {
	fake.getLatestStateChanMutex.RLock()
	defer fake.getLatestStateChanMutex.RUnlock()
	return len(fake.getLatestStateChanArgsForCall)
}

func (fake *FakeStateProvider) GetLatestStateChanCalls(stub func() <-chan *state.State) {
	fake.getLatestStateChanMutex.Lock()
	defer fake.getLatestStateChanMutex.Unlock()
	fake.GetLatestStateChanStub = stub
}

func (fake *FakeStateProvider) GetLatestStateChanReturns(result1 <-chan *state.State) {
	fake.getLatestStateChanMutex.Lock()
	defer fake.getLatestStateChanMutex.Unlock()
	fake.GetLatestStateChanStub = nil
	fake.getLatestStateChanReturns = struct {
		result1 <-chan *state.State
	}{result1}
}

func (fake *FakeStateProvider) GetLatestStateChanReturnsOnCall(i int, result1 <-chan *state.State) {
	fake.getLatestStateChanMutex.Lock()
	defer fake.getLatestStateChanMutex.Unlock()
	fake.GetLatestStateChanStub = nil
	if fake.getLatestStateChanReturnsOnCall == nil {
		fake.getLatestStateChanReturnsOnCall = make(map[int]struct {
			result1 <-chan *state.State
		})
	}
	fake.getLatestStateChanReturnsOnCall[i] = struct {
		result1 <-chan *state.State
	}{result1}
}

func (fake *FakeStateProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLatestStateChanMutex.RLock()
	defer fake.getLatestStateChanMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStateProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.StateProvider = new(FakeStateProvider)
