// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/types"
	"github.com/hyperledger/fabric-x-orderer/core"
)

type FakeBAFSender struct {
	SendBAFStub        func(types.BatchAttestationFragment)
	sendBAFMutex       sync.RWMutex
	sendBAFArgsForCall []struct {
		arg1 types.BatchAttestationFragment
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBAFSender) SendBAF(arg1 types.BatchAttestationFragment) {
	fake.sendBAFMutex.Lock()
	fake.sendBAFArgsForCall = append(fake.sendBAFArgsForCall, struct {
		arg1 types.BatchAttestationFragment
	}{arg1})
	stub := fake.SendBAFStub
	fake.recordInvocation("SendBAF", []interface{}{arg1})
	fake.sendBAFMutex.Unlock()
	if stub != nil {
		fake.SendBAFStub(arg1)
	}
}

func (fake *FakeBAFSender) SendBAFCallCount() int {
	fake.sendBAFMutex.RLock()
	defer fake.sendBAFMutex.RUnlock()
	return len(fake.sendBAFArgsForCall)
}

func (fake *FakeBAFSender) SendBAFCalls(stub func(types.BatchAttestationFragment)) {
	fake.sendBAFMutex.Lock()
	defer fake.sendBAFMutex.Unlock()
	fake.SendBAFStub = stub
}

func (fake *FakeBAFSender) SendBAFArgsForCall(i int) types.BatchAttestationFragment {
	fake.sendBAFMutex.RLock()
	defer fake.sendBAFMutex.RUnlock()
	argsForCall := fake.sendBAFArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBAFSender) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendBAFMutex.RLock()
	defer fake.sendBAFMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBAFSender) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.BAFSender = new(FakeBAFSender)
