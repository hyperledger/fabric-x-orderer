// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/types"
	"github.com/hyperledger/fabric-x-orderer/core"
)

type FakeBAFCreator struct {
	CreateBAFStub        func(types.BatchSequence, types.PartyID, types.ShardID, []byte) types.BatchAttestationFragment
	createBAFMutex       sync.RWMutex
	createBAFArgsForCall []struct {
		arg1 types.BatchSequence
		arg2 types.PartyID
		arg3 types.ShardID
		arg4 []byte
	}
	createBAFReturns struct {
		result1 types.BatchAttestationFragment
	}
	createBAFReturnsOnCall map[int]struct {
		result1 types.BatchAttestationFragment
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBAFCreator) CreateBAF(arg1 types.BatchSequence, arg2 types.PartyID, arg3 types.ShardID, arg4 []byte) types.BatchAttestationFragment {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.createBAFMutex.Lock()
	ret, specificReturn := fake.createBAFReturnsOnCall[len(fake.createBAFArgsForCall)]
	fake.createBAFArgsForCall = append(fake.createBAFArgsForCall, struct {
		arg1 types.BatchSequence
		arg2 types.PartyID
		arg3 types.ShardID
		arg4 []byte
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.CreateBAFStub
	fakeReturns := fake.createBAFReturns
	fake.recordInvocation("CreateBAF", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.createBAFMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBAFCreator) CreateBAFCallCount() int {
	fake.createBAFMutex.RLock()
	defer fake.createBAFMutex.RUnlock()
	return len(fake.createBAFArgsForCall)
}

func (fake *FakeBAFCreator) CreateBAFCalls(stub func(types.BatchSequence, types.PartyID, types.ShardID, []byte) types.BatchAttestationFragment) {
	fake.createBAFMutex.Lock()
	defer fake.createBAFMutex.Unlock()
	fake.CreateBAFStub = stub
}

func (fake *FakeBAFCreator) CreateBAFArgsForCall(i int) (types.BatchSequence, types.PartyID, types.ShardID, []byte) {
	fake.createBAFMutex.RLock()
	defer fake.createBAFMutex.RUnlock()
	argsForCall := fake.createBAFArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeBAFCreator) CreateBAFReturns(result1 types.BatchAttestationFragment) {
	fake.createBAFMutex.Lock()
	defer fake.createBAFMutex.Unlock()
	fake.CreateBAFStub = nil
	fake.createBAFReturns = struct {
		result1 types.BatchAttestationFragment
	}{result1}
}

func (fake *FakeBAFCreator) CreateBAFReturnsOnCall(i int, result1 types.BatchAttestationFragment) {
	fake.createBAFMutex.Lock()
	defer fake.createBAFMutex.Unlock()
	fake.CreateBAFStub = nil
	if fake.createBAFReturnsOnCall == nil {
		fake.createBAFReturnsOnCall = make(map[int]struct {
			result1 types.BatchAttestationFragment
		})
	}
	fake.createBAFReturnsOnCall[i] = struct {
		result1 types.BatchAttestationFragment
	}{result1}
}

func (fake *FakeBAFCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBAFMutex.RLock()
	defer fake.createBAFMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBAFCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.BAFCreator = new(FakeBAFCreator)
