// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/node/consensus"
)

type FakeBatchAttestationDB struct {
	CleanStub        func(uint64)
	cleanMutex       sync.RWMutex
	cleanArgsForCall []struct {
		arg1 uint64
	}
	ExistsStub        func([]byte) bool
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 []byte
	}
	existsReturns struct {
		result1 bool
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
	}
	PutStub        func([][]byte, []uint64)
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 [][]byte
		arg2 []uint64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBatchAttestationDB) Clean(arg1 uint64) {
	fake.cleanMutex.Lock()
	fake.cleanArgsForCall = append(fake.cleanArgsForCall, struct {
		arg1 uint64
	}{arg1})
	stub := fake.CleanStub
	fake.recordInvocation("Clean", []interface{}{arg1})
	fake.cleanMutex.Unlock()
	if stub != nil {
		fake.CleanStub(arg1)
	}
}

func (fake *FakeBatchAttestationDB) CleanCallCount() int {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return len(fake.cleanArgsForCall)
}

func (fake *FakeBatchAttestationDB) CleanCalls(stub func(uint64)) {
	fake.cleanMutex.Lock()
	defer fake.cleanMutex.Unlock()
	fake.CleanStub = stub
}

func (fake *FakeBatchAttestationDB) CleanArgsForCall(i int) uint64 {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	argsForCall := fake.cleanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBatchAttestationDB) Exists(arg1 []byte) bool {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.ExistsStub
	fakeReturns := fake.existsReturns
	fake.recordInvocation("Exists", []interface{}{arg1Copy})
	fake.existsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatchAttestationDB) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeBatchAttestationDB) ExistsCalls(stub func([]byte) bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = stub
}

func (fake *FakeBatchAttestationDB) ExistsArgsForCall(i int) []byte {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	argsForCall := fake.existsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBatchAttestationDB) ExistsReturns(result1 bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBatchAttestationDB) ExistsReturnsOnCall(i int, result1 bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBatchAttestationDB) Put(arg1 [][]byte, arg2 []uint64) {
	var arg1Copy [][]byte
	if arg1 != nil {
		arg1Copy = make([][]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []uint64
	if arg2 != nil {
		arg2Copy = make([]uint64, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.putMutex.Lock()
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 [][]byte
		arg2 []uint64
	}{arg1Copy, arg2Copy})
	stub := fake.PutStub
	fake.recordInvocation("Put", []interface{}{arg1Copy, arg2Copy})
	fake.putMutex.Unlock()
	if stub != nil {
		fake.PutStub(arg1, arg2)
	}
}

func (fake *FakeBatchAttestationDB) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakeBatchAttestationDB) PutCalls(stub func([][]byte, []uint64)) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = stub
}

func (fake *FakeBatchAttestationDB) PutArgsForCall(i int) ([][]byte, []uint64) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	argsForCall := fake.putArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBatchAttestationDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBatchAttestationDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ consensus.BatchAttestationDB = new(FakeBatchAttestationDB)
