// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/types"
	"github.com/hyperledger/fabric-x-orderer/core"
	"github.com/hyperledger/fabric-x-orderer/node/assembler"
)

type FakePartitionPrefetchIndexer struct {
	PopOrWaitStub        func(types.BatchID) (core.Batch, error)
	popOrWaitMutex       sync.RWMutex
	popOrWaitArgsForCall []struct {
		arg1 types.BatchID
	}
	popOrWaitReturns struct {
		result1 core.Batch
		result2 error
	}
	popOrWaitReturnsOnCall map[int]struct {
		result1 core.Batch
		result2 error
	}
	PutStub        func(core.Batch) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 core.Batch
	}
	putReturns struct {
		result1 error
	}
	putReturnsOnCall map[int]struct {
		result1 error
	}
	PutForceStub        func(core.Batch) error
	putForceMutex       sync.RWMutex
	putForceArgsForCall []struct {
		arg1 core.Batch
	}
	putForceReturns struct {
		result1 error
	}
	putForceReturnsOnCall map[int]struct {
		result1 error
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePartitionPrefetchIndexer) PopOrWait(arg1 types.BatchID) (core.Batch, error) {
	fake.popOrWaitMutex.Lock()
	ret, specificReturn := fake.popOrWaitReturnsOnCall[len(fake.popOrWaitArgsForCall)]
	fake.popOrWaitArgsForCall = append(fake.popOrWaitArgsForCall, struct {
		arg1 types.BatchID
	}{arg1})
	fake.recordInvocation("PopOrWait", []interface{}{arg1})
	fake.popOrWaitMutex.Unlock()
	if fake.PopOrWaitStub != nil {
		return fake.PopOrWaitStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.popOrWaitReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePartitionPrefetchIndexer) PopOrWaitCallCount() int {
	fake.popOrWaitMutex.RLock()
	defer fake.popOrWaitMutex.RUnlock()
	return len(fake.popOrWaitArgsForCall)
}

func (fake *FakePartitionPrefetchIndexer) PopOrWaitCalls(stub func(types.BatchID) (core.Batch, error)) {
	fake.popOrWaitMutex.Lock()
	defer fake.popOrWaitMutex.Unlock()
	fake.PopOrWaitStub = stub
}

func (fake *FakePartitionPrefetchIndexer) PopOrWaitArgsForCall(i int) types.BatchID {
	fake.popOrWaitMutex.RLock()
	defer fake.popOrWaitMutex.RUnlock()
	argsForCall := fake.popOrWaitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePartitionPrefetchIndexer) PopOrWaitReturns(result1 core.Batch, result2 error) {
	fake.popOrWaitMutex.Lock()
	defer fake.popOrWaitMutex.Unlock()
	fake.PopOrWaitStub = nil
	fake.popOrWaitReturns = struct {
		result1 core.Batch
		result2 error
	}{result1, result2}
}

func (fake *FakePartitionPrefetchIndexer) PopOrWaitReturnsOnCall(i int, result1 core.Batch, result2 error) {
	fake.popOrWaitMutex.Lock()
	defer fake.popOrWaitMutex.Unlock()
	fake.PopOrWaitStub = nil
	if fake.popOrWaitReturnsOnCall == nil {
		fake.popOrWaitReturnsOnCall = make(map[int]struct {
			result1 core.Batch
			result2 error
		})
	}
	fake.popOrWaitReturnsOnCall[i] = struct {
		result1 core.Batch
		result2 error
	}{result1, result2}
}

func (fake *FakePartitionPrefetchIndexer) Put(arg1 core.Batch) error {
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 core.Batch
	}{arg1})
	fake.recordInvocation("Put", []interface{}{arg1})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.putReturns
	return fakeReturns.result1
}

func (fake *FakePartitionPrefetchIndexer) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakePartitionPrefetchIndexer) PutCalls(stub func(core.Batch) error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = stub
}

func (fake *FakePartitionPrefetchIndexer) PutArgsForCall(i int) core.Batch {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	argsForCall := fake.putArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePartitionPrefetchIndexer) PutReturns(result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePartitionPrefetchIndexer) PutReturnsOnCall(i int, result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePartitionPrefetchIndexer) PutForce(arg1 core.Batch) error {
	fake.putForceMutex.Lock()
	ret, specificReturn := fake.putForceReturnsOnCall[len(fake.putForceArgsForCall)]
	fake.putForceArgsForCall = append(fake.putForceArgsForCall, struct {
		arg1 core.Batch
	}{arg1})
	fake.recordInvocation("PutForce", []interface{}{arg1})
	fake.putForceMutex.Unlock()
	if fake.PutForceStub != nil {
		return fake.PutForceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.putForceReturns
	return fakeReturns.result1
}

func (fake *FakePartitionPrefetchIndexer) PutForceCallCount() int {
	fake.putForceMutex.RLock()
	defer fake.putForceMutex.RUnlock()
	return len(fake.putForceArgsForCall)
}

func (fake *FakePartitionPrefetchIndexer) PutForceCalls(stub func(core.Batch) error) {
	fake.putForceMutex.Lock()
	defer fake.putForceMutex.Unlock()
	fake.PutForceStub = stub
}

func (fake *FakePartitionPrefetchIndexer) PutForceArgsForCall(i int) core.Batch {
	fake.putForceMutex.RLock()
	defer fake.putForceMutex.RUnlock()
	argsForCall := fake.putForceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePartitionPrefetchIndexer) PutForceReturns(result1 error) {
	fake.putForceMutex.Lock()
	defer fake.putForceMutex.Unlock()
	fake.PutForceStub = nil
	fake.putForceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePartitionPrefetchIndexer) PutForceReturnsOnCall(i int, result1 error) {
	fake.putForceMutex.Lock()
	defer fake.putForceMutex.Unlock()
	fake.PutForceStub = nil
	if fake.putForceReturnsOnCall == nil {
		fake.putForceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putForceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePartitionPrefetchIndexer) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakePartitionPrefetchIndexer) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakePartitionPrefetchIndexer) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakePartitionPrefetchIndexer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.popOrWaitMutex.RLock()
	defer fake.popOrWaitMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	fake.putForceMutex.RLock()
	defer fake.putForceMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePartitionPrefetchIndexer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ assembler.PartitionPrefetchIndexer = new(FakePartitionPrefetchIndexer)
