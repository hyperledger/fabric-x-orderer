// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/types"
	"github.com/hyperledger/fabric-x-orderer/core"
	"github.com/hyperledger/fabric-x-orderer/node/assembler"
)

type FakeBatchBringer struct {
	GetBatchStub        func(types.BatchID) (core.Batch, error)
	getBatchMutex       sync.RWMutex
	getBatchArgsForCall []struct {
		arg1 types.BatchID
	}
	getBatchReturns struct {
		result1 core.Batch
		result2 error
	}
	getBatchReturnsOnCall map[int]struct {
		result1 core.Batch
		result2 error
	}
	ReplicateStub        func(types.ShardID) <-chan core.Batch
	replicateMutex       sync.RWMutex
	replicateArgsForCall []struct {
		arg1 types.ShardID
	}
	replicateReturns struct {
		result1 <-chan core.Batch
	}
	replicateReturnsOnCall map[int]struct {
		result1 <-chan core.Batch
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBatchBringer) GetBatch(arg1 types.BatchID) (core.Batch, error) {
	fake.getBatchMutex.Lock()
	ret, specificReturn := fake.getBatchReturnsOnCall[len(fake.getBatchArgsForCall)]
	fake.getBatchArgsForCall = append(fake.getBatchArgsForCall, struct {
		arg1 types.BatchID
	}{arg1})
	fake.recordInvocation("GetBatch", []interface{}{arg1})
	fake.getBatchMutex.Unlock()
	if fake.GetBatchStub != nil {
		return fake.GetBatchStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBatchReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBatchBringer) GetBatchCallCount() int {
	fake.getBatchMutex.RLock()
	defer fake.getBatchMutex.RUnlock()
	return len(fake.getBatchArgsForCall)
}

func (fake *FakeBatchBringer) GetBatchCalls(stub func(types.BatchID) (core.Batch, error)) {
	fake.getBatchMutex.Lock()
	defer fake.getBatchMutex.Unlock()
	fake.GetBatchStub = stub
}

func (fake *FakeBatchBringer) GetBatchArgsForCall(i int) types.BatchID {
	fake.getBatchMutex.RLock()
	defer fake.getBatchMutex.RUnlock()
	argsForCall := fake.getBatchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBatchBringer) GetBatchReturns(result1 core.Batch, result2 error) {
	fake.getBatchMutex.Lock()
	defer fake.getBatchMutex.Unlock()
	fake.GetBatchStub = nil
	fake.getBatchReturns = struct {
		result1 core.Batch
		result2 error
	}{result1, result2}
}

func (fake *FakeBatchBringer) GetBatchReturnsOnCall(i int, result1 core.Batch, result2 error) {
	fake.getBatchMutex.Lock()
	defer fake.getBatchMutex.Unlock()
	fake.GetBatchStub = nil
	if fake.getBatchReturnsOnCall == nil {
		fake.getBatchReturnsOnCall = make(map[int]struct {
			result1 core.Batch
			result2 error
		})
	}
	fake.getBatchReturnsOnCall[i] = struct {
		result1 core.Batch
		result2 error
	}{result1, result2}
}

func (fake *FakeBatchBringer) Replicate(arg1 types.ShardID) <-chan core.Batch {
	fake.replicateMutex.Lock()
	ret, specificReturn := fake.replicateReturnsOnCall[len(fake.replicateArgsForCall)]
	fake.replicateArgsForCall = append(fake.replicateArgsForCall, struct {
		arg1 types.ShardID
	}{arg1})
	fake.recordInvocation("Replicate", []interface{}{arg1})
	fake.replicateMutex.Unlock()
	if fake.ReplicateStub != nil {
		return fake.ReplicateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.replicateReturns
	return fakeReturns.result1
}

func (fake *FakeBatchBringer) ReplicateCallCount() int {
	fake.replicateMutex.RLock()
	defer fake.replicateMutex.RUnlock()
	return len(fake.replicateArgsForCall)
}

func (fake *FakeBatchBringer) ReplicateCalls(stub func(types.ShardID) <-chan core.Batch) {
	fake.replicateMutex.Lock()
	defer fake.replicateMutex.Unlock()
	fake.ReplicateStub = stub
}

func (fake *FakeBatchBringer) ReplicateArgsForCall(i int) types.ShardID {
	fake.replicateMutex.RLock()
	defer fake.replicateMutex.RUnlock()
	argsForCall := fake.replicateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBatchBringer) ReplicateReturns(result1 <-chan core.Batch) {
	fake.replicateMutex.Lock()
	defer fake.replicateMutex.Unlock()
	fake.ReplicateStub = nil
	fake.replicateReturns = struct {
		result1 <-chan core.Batch
	}{result1}
}

func (fake *FakeBatchBringer) ReplicateReturnsOnCall(i int, result1 <-chan core.Batch) {
	fake.replicateMutex.Lock()
	defer fake.replicateMutex.Unlock()
	fake.ReplicateStub = nil
	if fake.replicateReturnsOnCall == nil {
		fake.replicateReturnsOnCall = make(map[int]struct {
			result1 <-chan core.Batch
		})
	}
	fake.replicateReturnsOnCall[i] = struct {
		result1 <-chan core.Batch
	}{result1}
}

func (fake *FakeBatchBringer) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakeBatchBringer) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeBatchBringer) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeBatchBringer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBatchMutex.RLock()
	defer fake.getBatchMutex.RUnlock()
	fake.replicateMutex.RLock()
	defer fake.replicateMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBatchBringer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ assembler.BatchBringer = new(FakeBatchBringer)
