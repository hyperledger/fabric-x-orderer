// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/types"
	"github.com/hyperledger/fabric-x-orderer/node/assembler"
)

type FakePrefetchIndexer struct {
	PopOrWaitStub        func(types.BatchID) (types.Batch, error)
	popOrWaitMutex       sync.RWMutex
	popOrWaitArgsForCall []struct {
		arg1 types.BatchID
	}
	popOrWaitReturns struct {
		result1 types.Batch
		result2 error
	}
	popOrWaitReturnsOnCall map[int]struct {
		result1 types.Batch
		result2 error
	}
	PutStub        func(types.Batch) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 types.Batch
	}
	putReturns struct {
		result1 error
	}
	putReturnsOnCall map[int]struct {
		result1 error
	}
	PutForceStub        func(types.Batch) error
	putForceMutex       sync.RWMutex
	putForceArgsForCall []struct {
		arg1 types.Batch
	}
	putForceReturns struct {
		result1 error
	}
	putForceReturnsOnCall map[int]struct {
		result1 error
	}
	RequestsStub        func() <-chan types.BatchID
	requestsMutex       sync.RWMutex
	requestsArgsForCall []struct {
	}
	requestsReturns struct {
		result1 <-chan types.BatchID
	}
	requestsReturnsOnCall map[int]struct {
		result1 <-chan types.BatchID
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePrefetchIndexer) PopOrWait(arg1 types.BatchID) (types.Batch, error) {
	fake.popOrWaitMutex.Lock()
	ret, specificReturn := fake.popOrWaitReturnsOnCall[len(fake.popOrWaitArgsForCall)]
	fake.popOrWaitArgsForCall = append(fake.popOrWaitArgsForCall, struct {
		arg1 types.BatchID
	}{arg1})
	stub := fake.PopOrWaitStub
	fakeReturns := fake.popOrWaitReturns
	fake.recordInvocation("PopOrWait", []interface{}{arg1})
	fake.popOrWaitMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePrefetchIndexer) PopOrWaitCallCount() int {
	fake.popOrWaitMutex.RLock()
	defer fake.popOrWaitMutex.RUnlock()
	return len(fake.popOrWaitArgsForCall)
}

func (fake *FakePrefetchIndexer) PopOrWaitCalls(stub func(types.BatchID) (types.Batch, error)) {
	fake.popOrWaitMutex.Lock()
	defer fake.popOrWaitMutex.Unlock()
	fake.PopOrWaitStub = stub
}

func (fake *FakePrefetchIndexer) PopOrWaitArgsForCall(i int) types.BatchID {
	fake.popOrWaitMutex.RLock()
	defer fake.popOrWaitMutex.RUnlock()
	argsForCall := fake.popOrWaitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrefetchIndexer) PopOrWaitReturns(result1 types.Batch, result2 error) {
	fake.popOrWaitMutex.Lock()
	defer fake.popOrWaitMutex.Unlock()
	fake.PopOrWaitStub = nil
	fake.popOrWaitReturns = struct {
		result1 types.Batch
		result2 error
	}{result1, result2}
}

func (fake *FakePrefetchIndexer) PopOrWaitReturnsOnCall(i int, result1 types.Batch, result2 error) {
	fake.popOrWaitMutex.Lock()
	defer fake.popOrWaitMutex.Unlock()
	fake.PopOrWaitStub = nil
	if fake.popOrWaitReturnsOnCall == nil {
		fake.popOrWaitReturnsOnCall = make(map[int]struct {
			result1 types.Batch
			result2 error
		})
	}
	fake.popOrWaitReturnsOnCall[i] = struct {
		result1 types.Batch
		result2 error
	}{result1, result2}
}

func (fake *FakePrefetchIndexer) Put(arg1 types.Batch) error {
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 types.Batch
	}{arg1})
	stub := fake.PutStub
	fakeReturns := fake.putReturns
	fake.recordInvocation("Put", []interface{}{arg1})
	fake.putMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePrefetchIndexer) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakePrefetchIndexer) PutCalls(stub func(types.Batch) error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = stub
}

func (fake *FakePrefetchIndexer) PutArgsForCall(i int) types.Batch {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	argsForCall := fake.putArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrefetchIndexer) PutReturns(result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefetchIndexer) PutReturnsOnCall(i int, result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefetchIndexer) PutForce(arg1 types.Batch) error {
	fake.putForceMutex.Lock()
	ret, specificReturn := fake.putForceReturnsOnCall[len(fake.putForceArgsForCall)]
	fake.putForceArgsForCall = append(fake.putForceArgsForCall, struct {
		arg1 types.Batch
	}{arg1})
	stub := fake.PutForceStub
	fakeReturns := fake.putForceReturns
	fake.recordInvocation("PutForce", []interface{}{arg1})
	fake.putForceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePrefetchIndexer) PutForceCallCount() int {
	fake.putForceMutex.RLock()
	defer fake.putForceMutex.RUnlock()
	return len(fake.putForceArgsForCall)
}

func (fake *FakePrefetchIndexer) PutForceCalls(stub func(types.Batch) error) {
	fake.putForceMutex.Lock()
	defer fake.putForceMutex.Unlock()
	fake.PutForceStub = stub
}

func (fake *FakePrefetchIndexer) PutForceArgsForCall(i int) types.Batch {
	fake.putForceMutex.RLock()
	defer fake.putForceMutex.RUnlock()
	argsForCall := fake.putForceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrefetchIndexer) PutForceReturns(result1 error) {
	fake.putForceMutex.Lock()
	defer fake.putForceMutex.Unlock()
	fake.PutForceStub = nil
	fake.putForceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefetchIndexer) PutForceReturnsOnCall(i int, result1 error) {
	fake.putForceMutex.Lock()
	defer fake.putForceMutex.Unlock()
	fake.PutForceStub = nil
	if fake.putForceReturnsOnCall == nil {
		fake.putForceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putForceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefetchIndexer) Requests() <-chan types.BatchID {
	fake.requestsMutex.Lock()
	ret, specificReturn := fake.requestsReturnsOnCall[len(fake.requestsArgsForCall)]
	fake.requestsArgsForCall = append(fake.requestsArgsForCall, struct {
	}{})
	stub := fake.RequestsStub
	fakeReturns := fake.requestsReturns
	fake.recordInvocation("Requests", []interface{}{})
	fake.requestsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePrefetchIndexer) RequestsCallCount() int {
	fake.requestsMutex.RLock()
	defer fake.requestsMutex.RUnlock()
	return len(fake.requestsArgsForCall)
}

func (fake *FakePrefetchIndexer) RequestsCalls(stub func() <-chan types.BatchID) {
	fake.requestsMutex.Lock()
	defer fake.requestsMutex.Unlock()
	fake.RequestsStub = stub
}

func (fake *FakePrefetchIndexer) RequestsReturns(result1 <-chan types.BatchID) {
	fake.requestsMutex.Lock()
	defer fake.requestsMutex.Unlock()
	fake.RequestsStub = nil
	fake.requestsReturns = struct {
		result1 <-chan types.BatchID
	}{result1}
}

func (fake *FakePrefetchIndexer) RequestsReturnsOnCall(i int, result1 <-chan types.BatchID) {
	fake.requestsMutex.Lock()
	defer fake.requestsMutex.Unlock()
	fake.RequestsStub = nil
	if fake.requestsReturnsOnCall == nil {
		fake.requestsReturnsOnCall = make(map[int]struct {
			result1 <-chan types.BatchID
		})
	}
	fake.requestsReturnsOnCall[i] = struct {
		result1 <-chan types.BatchID
	}{result1}
}

func (fake *FakePrefetchIndexer) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	stub := fake.StopStub
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if stub != nil {
		fake.StopStub()
	}
}

func (fake *FakePrefetchIndexer) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakePrefetchIndexer) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakePrefetchIndexer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.popOrWaitMutex.RLock()
	defer fake.popOrWaitMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	fake.putForceMutex.RLock()
	defer fake.putForceMutex.RUnlock()
	fake.requestsMutex.RLock()
	defer fake.requestsMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePrefetchIndexer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ assembler.PrefetchIndexer = new(FakePrefetchIndexer)
