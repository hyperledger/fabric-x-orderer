// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/node/batcher"
)

type FakeComplainer struct {
	ComplainStub        func(string)
	complainMutex       sync.RWMutex
	complainArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeComplainer) Complain(arg1 string) {
	fake.complainMutex.Lock()
	fake.complainArgsForCall = append(fake.complainArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ComplainStub
	fake.recordInvocation("Complain", []interface{}{arg1})
	fake.complainMutex.Unlock()
	if stub != nil {
		fake.ComplainStub(arg1)
	}
}

func (fake *FakeComplainer) ComplainCallCount() int {
	fake.complainMutex.RLock()
	defer fake.complainMutex.RUnlock()
	return len(fake.complainArgsForCall)
}

func (fake *FakeComplainer) ComplainCalls(stub func(string)) {
	fake.complainMutex.Lock()
	defer fake.complainMutex.Unlock()
	fake.ComplainStub = stub
}

func (fake *FakeComplainer) ComplainArgsForCall(i int) string {
	fake.complainMutex.RLock()
	defer fake.complainMutex.RUnlock()
	argsForCall := fake.complainArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeComplainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeComplainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ batcher.Complainer = new(FakeComplainer)
