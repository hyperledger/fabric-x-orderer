// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/node/batcher"
	"github.com/hyperledger/fabric-x-orderer/node/consensus/state"
)

type FakeStateReplicator struct {
	ReplicateStateStub        func() <-chan *state.State
	replicateStateMutex       sync.RWMutex
	replicateStateArgsForCall []struct{}
	replicateStateReturns     struct {
		result1 <-chan *state.State
	}
	replicateStateReturnsOnCall map[int]struct {
		result1 <-chan *state.State
	}
	StopStub         func()
	stopMutex        sync.RWMutex
	stopArgsForCall  []struct{}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStateReplicator) ReplicateState() <-chan *state.State {
	fake.replicateStateMutex.Lock()
	ret, specificReturn := fake.replicateStateReturnsOnCall[len(fake.replicateStateArgsForCall)]
	fake.replicateStateArgsForCall = append(fake.replicateStateArgsForCall, struct{}{})
	stub := fake.ReplicateStateStub
	fakeReturns := fake.replicateStateReturns
	fake.recordInvocation("ReplicateState", []interface{}{})
	fake.replicateStateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStateReplicator) ReplicateStateCallCount() int {
	fake.replicateStateMutex.RLock()
	defer fake.replicateStateMutex.RUnlock()
	return len(fake.replicateStateArgsForCall)
}

func (fake *FakeStateReplicator) ReplicateStateCalls(stub func() <-chan *state.State) {
	fake.replicateStateMutex.Lock()
	defer fake.replicateStateMutex.Unlock()
	fake.ReplicateStateStub = stub
}

func (fake *FakeStateReplicator) ReplicateStateReturns(result1 <-chan *state.State) {
	fake.replicateStateMutex.Lock()
	defer fake.replicateStateMutex.Unlock()
	fake.ReplicateStateStub = nil
	fake.replicateStateReturns = struct {
		result1 <-chan *state.State
	}{result1}
}

func (fake *FakeStateReplicator) ReplicateStateReturnsOnCall(i int, result1 <-chan *state.State) {
	fake.replicateStateMutex.Lock()
	defer fake.replicateStateMutex.Unlock()
	fake.ReplicateStateStub = nil
	if fake.replicateStateReturnsOnCall == nil {
		fake.replicateStateReturnsOnCall = make(map[int]struct {
			result1 <-chan *state.State
		})
	}
	fake.replicateStateReturnsOnCall[i] = struct {
		result1 <-chan *state.State
	}{result1}
}

func (fake *FakeStateReplicator) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct{}{})
	stub := fake.StopStub
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if stub != nil {
		fake.StopStub()
	}
}

func (fake *FakeStateReplicator) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeStateReplicator) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeStateReplicator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.replicateStateMutex.RLock()
	defer fake.replicateStateMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStateReplicator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ batcher.StateReplicator = new(FakeStateReplicator)
