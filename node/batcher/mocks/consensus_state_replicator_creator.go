// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/types"
	"github.com/hyperledger/fabric-x-orderer/node/batcher"
	"github.com/hyperledger/fabric-x-orderer/node/config"
)

type FakeConsensusStateReplicatorCreator struct {
	CreateStateConsensusReplicatorStub        func(*config.BatcherNodeConfig, types.Logger) batcher.StateReplicator
	createStateConsensusReplicatorMutex       sync.RWMutex
	createStateConsensusReplicatorArgsForCall []struct {
		arg1 *config.BatcherNodeConfig
		arg2 types.Logger
	}
	createStateConsensusReplicatorReturns struct {
		result1 batcher.StateReplicator
	}
	createStateConsensusReplicatorReturnsOnCall map[int]struct {
		result1 batcher.StateReplicator
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConsensusStateReplicatorCreator) CreateStateConsensusReplicator(arg1 *config.BatcherNodeConfig, arg2 types.Logger) batcher.StateReplicator {
	fake.createStateConsensusReplicatorMutex.Lock()
	ret, specificReturn := fake.createStateConsensusReplicatorReturnsOnCall[len(fake.createStateConsensusReplicatorArgsForCall)]
	fake.createStateConsensusReplicatorArgsForCall = append(fake.createStateConsensusReplicatorArgsForCall, struct {
		arg1 *config.BatcherNodeConfig
		arg2 types.Logger
	}{arg1, arg2})
	stub := fake.CreateStateConsensusReplicatorStub
	fakeReturns := fake.createStateConsensusReplicatorReturns
	fake.recordInvocation("CreateStateConsensusReplicator", []interface{}{arg1, arg2})
	fake.createStateConsensusReplicatorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConsensusStateReplicatorCreator) CreateStateConsensusReplicatorCallCount() int {
	fake.createStateConsensusReplicatorMutex.RLock()
	defer fake.createStateConsensusReplicatorMutex.RUnlock()
	return len(fake.createStateConsensusReplicatorArgsForCall)
}

func (fake *FakeConsensusStateReplicatorCreator) CreateStateConsensusReplicatorCalls(stub func(*config.BatcherNodeConfig, types.Logger) batcher.StateReplicator) {
	fake.createStateConsensusReplicatorMutex.Lock()
	defer fake.createStateConsensusReplicatorMutex.Unlock()
	fake.CreateStateConsensusReplicatorStub = stub
}

func (fake *FakeConsensusStateReplicatorCreator) CreateStateConsensusReplicatorArgsForCall(i int) (*config.BatcherNodeConfig, types.Logger) {
	fake.createStateConsensusReplicatorMutex.RLock()
	defer fake.createStateConsensusReplicatorMutex.RUnlock()
	argsForCall := fake.createStateConsensusReplicatorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConsensusStateReplicatorCreator) CreateStateConsensusReplicatorReturns(result1 batcher.StateReplicator) {
	fake.createStateConsensusReplicatorMutex.Lock()
	defer fake.createStateConsensusReplicatorMutex.Unlock()
	fake.CreateStateConsensusReplicatorStub = nil
	fake.createStateConsensusReplicatorReturns = struct {
		result1 batcher.StateReplicator
	}{result1}
}

func (fake *FakeConsensusStateReplicatorCreator) CreateStateConsensusReplicatorReturnsOnCall(i int, result1 batcher.StateReplicator) {
	fake.createStateConsensusReplicatorMutex.Lock()
	defer fake.createStateConsensusReplicatorMutex.Unlock()
	fake.CreateStateConsensusReplicatorStub = nil
	if fake.createStateConsensusReplicatorReturnsOnCall == nil {
		fake.createStateConsensusReplicatorReturnsOnCall = make(map[int]struct {
			result1 batcher.StateReplicator
		})
	}
	fake.createStateConsensusReplicatorReturnsOnCall[i] = struct {
		result1 batcher.StateReplicator
	}{result1}
}

func (fake *FakeConsensusStateReplicatorCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConsensusStateReplicatorCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ batcher.ConsensusStateReplicatorCreator = new(FakeConsensusStateReplicatorCreator)
