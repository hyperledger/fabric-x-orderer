// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/node/batcher"
	"github.com/hyperledger/fabric-x-orderer/node/config"
)

type FakeConsenterControlEventSenderCreator struct {
	CreateConsenterControlEventSenderStub        func(config.RawBytes, config.RawBytes, config.ConsenterInfo) batcher.ConsenterControlEventSender
	createConsenterControlEventSenderMutex       sync.RWMutex
	createConsenterControlEventSenderArgsForCall []struct {
		arg1 config.RawBytes
		arg2 config.RawBytes
		arg3 config.ConsenterInfo
	}
	createConsenterControlEventSenderReturns struct {
		result1 batcher.ConsenterControlEventSender
	}
	createConsenterControlEventSenderReturnsOnCall map[int]struct {
		result1 batcher.ConsenterControlEventSender
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConsenterControlEventSenderCreator) CreateConsenterControlEventSender(arg1 config.RawBytes, arg2 config.RawBytes, arg3 config.ConsenterInfo) batcher.ConsenterControlEventSender {
	fake.createConsenterControlEventSenderMutex.Lock()
	ret, specificReturn := fake.createConsenterControlEventSenderReturnsOnCall[len(fake.createConsenterControlEventSenderArgsForCall)]
	fake.createConsenterControlEventSenderArgsForCall = append(fake.createConsenterControlEventSenderArgsForCall, struct {
		arg1 config.RawBytes
		arg2 config.RawBytes
		arg3 config.ConsenterInfo
	}{arg1, arg2, arg3})
	stub := fake.CreateConsenterControlEventSenderStub
	fakeReturns := fake.createConsenterControlEventSenderReturns
	fake.recordInvocation("CreateConsenterControlEventSender", []interface{}{arg1, arg2, arg3})
	fake.createConsenterControlEventSenderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConsenterControlEventSenderCreator) CreateConsenterControlEventSenderCallCount() int {
	fake.createConsenterControlEventSenderMutex.RLock()
	defer fake.createConsenterControlEventSenderMutex.RUnlock()
	return len(fake.createConsenterControlEventSenderArgsForCall)
}

func (fake *FakeConsenterControlEventSenderCreator) CreateConsenterControlEventSenderCalls(stub func(config.RawBytes, config.RawBytes, config.ConsenterInfo) batcher.ConsenterControlEventSender) {
	fake.createConsenterControlEventSenderMutex.Lock()
	defer fake.createConsenterControlEventSenderMutex.Unlock()
	fake.CreateConsenterControlEventSenderStub = stub
}

func (fake *FakeConsenterControlEventSenderCreator) CreateConsenterControlEventSenderArgsForCall(i int) (config.RawBytes, config.RawBytes, config.ConsenterInfo) {
	fake.createConsenterControlEventSenderMutex.RLock()
	defer fake.createConsenterControlEventSenderMutex.RUnlock()
	argsForCall := fake.createConsenterControlEventSenderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeConsenterControlEventSenderCreator) CreateConsenterControlEventSenderReturns(result1 batcher.ConsenterControlEventSender) {
	fake.createConsenterControlEventSenderMutex.Lock()
	defer fake.createConsenterControlEventSenderMutex.Unlock()
	fake.CreateConsenterControlEventSenderStub = nil
	fake.createConsenterControlEventSenderReturns = struct {
		result1 batcher.ConsenterControlEventSender
	}{result1}
}

func (fake *FakeConsenterControlEventSenderCreator) CreateConsenterControlEventSenderReturnsOnCall(i int, result1 batcher.ConsenterControlEventSender) {
	fake.createConsenterControlEventSenderMutex.Lock()
	defer fake.createConsenterControlEventSenderMutex.Unlock()
	fake.CreateConsenterControlEventSenderStub = nil
	if fake.createConsenterControlEventSenderReturnsOnCall == nil {
		fake.createConsenterControlEventSenderReturnsOnCall = make(map[int]struct {
			result1 batcher.ConsenterControlEventSender
		})
	}
	fake.createConsenterControlEventSenderReturnsOnCall[i] = struct {
		result1 batcher.ConsenterControlEventSender
	}{result1}
}

func (fake *FakeConsenterControlEventSenderCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConsenterControlEventSenderCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ batcher.ConsenterControlEventSenderCreator = new(FakeConsenterControlEventSenderCreator)
