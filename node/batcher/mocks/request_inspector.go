// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/node/batcher"
)

type FakeRequestInspector struct {
	RequestIDStub        func([]byte) string
	requestIDMutex       sync.RWMutex
	requestIDArgsForCall []struct {
		arg1 []byte
	}
	requestIDReturns struct {
		result1 string
	}
	requestIDReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestInspector) RequestID(arg1 []byte) string {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.requestIDMutex.Lock()
	ret, specificReturn := fake.requestIDReturnsOnCall[len(fake.requestIDArgsForCall)]
	fake.requestIDArgsForCall = append(fake.requestIDArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.RequestIDStub
	fakeReturns := fake.requestIDReturns
	fake.recordInvocation("RequestID", []interface{}{arg1Copy})
	fake.requestIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRequestInspector) RequestIDCallCount() int {
	fake.requestIDMutex.RLock()
	defer fake.requestIDMutex.RUnlock()
	return len(fake.requestIDArgsForCall)
}

func (fake *FakeRequestInspector) RequestIDCalls(stub func([]byte) string) {
	fake.requestIDMutex.Lock()
	defer fake.requestIDMutex.Unlock()
	fake.RequestIDStub = stub
}

func (fake *FakeRequestInspector) RequestIDArgsForCall(i int) []byte {
	fake.requestIDMutex.RLock()
	defer fake.requestIDMutex.RUnlock()
	argsForCall := fake.requestIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRequestInspector) RequestIDReturns(result1 string) {
	fake.requestIDMutex.Lock()
	defer fake.requestIDMutex.Unlock()
	fake.RequestIDStub = nil
	fake.requestIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRequestInspector) RequestIDReturnsOnCall(i int, result1 string) {
	fake.requestIDMutex.Lock()
	defer fake.requestIDMutex.Unlock()
	fake.RequestIDStub = nil
	if fake.requestIDReturnsOnCall == nil {
		fake.requestIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.requestIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRequestInspector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.requestIDMutex.RLock()
	defer fake.requestIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRequestInspector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ batcher.RequestInspector = new(FakeRequestInspector)
