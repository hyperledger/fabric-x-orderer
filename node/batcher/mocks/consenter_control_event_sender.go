// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/node/batcher"
	"github.com/hyperledger/fabric-x-orderer/node/consensus/state"
)

type FakeConsenterControlEventSender struct {
	SendControlEventStub        func(state.ControlEvent) error
	sendControlEventMutex       sync.RWMutex
	sendControlEventArgsForCall []struct {
		arg1 state.ControlEvent
	}
	sendControlEventReturns struct {
		result1 error
	}
	sendControlEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConsenterControlEventSender) SendControlEvent(arg1 state.ControlEvent) error {
	fake.sendControlEventMutex.Lock()
	ret, specificReturn := fake.sendControlEventReturnsOnCall[len(fake.sendControlEventArgsForCall)]
	fake.sendControlEventArgsForCall = append(fake.sendControlEventArgsForCall, struct {
		arg1 state.ControlEvent
	}{arg1})
	stub := fake.SendControlEventStub
	fakeReturns := fake.sendControlEventReturns
	fake.recordInvocation("SendControlEvent", []interface{}{arg1})
	fake.sendControlEventMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConsenterControlEventSender) SendControlEventCallCount() int {
	fake.sendControlEventMutex.RLock()
	defer fake.sendControlEventMutex.RUnlock()
	return len(fake.sendControlEventArgsForCall)
}

func (fake *FakeConsenterControlEventSender) SendControlEventCalls(stub func(state.ControlEvent) error) {
	fake.sendControlEventMutex.Lock()
	defer fake.sendControlEventMutex.Unlock()
	fake.SendControlEventStub = stub
}

func (fake *FakeConsenterControlEventSender) SendControlEventArgsForCall(i int) state.ControlEvent {
	fake.sendControlEventMutex.RLock()
	defer fake.sendControlEventMutex.RUnlock()
	argsForCall := fake.sendControlEventArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConsenterControlEventSender) SendControlEventReturns(result1 error) {
	fake.sendControlEventMutex.Lock()
	defer fake.sendControlEventMutex.Unlock()
	fake.SendControlEventStub = nil
	fake.sendControlEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsenterControlEventSender) SendControlEventReturnsOnCall(i int, result1 error) {
	fake.sendControlEventMutex.Lock()
	defer fake.sendControlEventMutex.Unlock()
	fake.SendControlEventStub = nil
	if fake.sendControlEventReturnsOnCall == nil {
		fake.sendControlEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendControlEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsenterControlEventSender) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendControlEventMutex.RLock()
	defer fake.sendControlEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConsenterControlEventSender) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ batcher.ConsenterControlEventSender = new(FakeConsenterControlEventSender)
