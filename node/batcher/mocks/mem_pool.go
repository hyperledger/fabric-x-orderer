// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/hyperledger/fabric-x-orderer/node/batcher"
)

type FakeMemPool struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	NextRequestsStub        func(context.Context) [][]byte
	nextRequestsMutex       sync.RWMutex
	nextRequestsArgsForCall []struct {
		arg1 context.Context
	}
	nextRequestsReturns struct {
		result1 [][]byte
	}
	nextRequestsReturnsOnCall map[int]struct {
		result1 [][]byte
	}
	RemoveRequestsStub        func(...string)
	removeRequestsMutex       sync.RWMutex
	removeRequestsArgsForCall []struct {
		arg1 []string
	}
	RestartStub        func(bool)
	restartMutex       sync.RWMutex
	restartArgsForCall []struct {
		arg1 bool
	}
	SubmitStub        func([]byte) error
	submitMutex       sync.RWMutex
	submitArgsForCall []struct {
		arg1 []byte
	}
	submitReturns struct {
		result1 error
	}
	submitReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMemPool) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeMemPool) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeMemPool) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeMemPool) NextRequests(arg1 context.Context) [][]byte {
	fake.nextRequestsMutex.Lock()
	ret, specificReturn := fake.nextRequestsReturnsOnCall[len(fake.nextRequestsArgsForCall)]
	fake.nextRequestsArgsForCall = append(fake.nextRequestsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.NextRequestsStub
	fakeReturns := fake.nextRequestsReturns
	fake.recordInvocation("NextRequests", []interface{}{arg1})
	fake.nextRequestsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMemPool) NextRequestsCallCount() int {
	fake.nextRequestsMutex.RLock()
	defer fake.nextRequestsMutex.RUnlock()
	return len(fake.nextRequestsArgsForCall)
}

func (fake *FakeMemPool) NextRequestsCalls(stub func(context.Context) [][]byte) {
	fake.nextRequestsMutex.Lock()
	defer fake.nextRequestsMutex.Unlock()
	fake.NextRequestsStub = stub
}

func (fake *FakeMemPool) NextRequestsArgsForCall(i int) context.Context {
	fake.nextRequestsMutex.RLock()
	defer fake.nextRequestsMutex.RUnlock()
	argsForCall := fake.nextRequestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMemPool) NextRequestsReturns(result1 [][]byte) {
	fake.nextRequestsMutex.Lock()
	defer fake.nextRequestsMutex.Unlock()
	fake.NextRequestsStub = nil
	fake.nextRequestsReturns = struct {
		result1 [][]byte
	}{result1}
}

func (fake *FakeMemPool) NextRequestsReturnsOnCall(i int, result1 [][]byte) {
	fake.nextRequestsMutex.Lock()
	defer fake.nextRequestsMutex.Unlock()
	fake.NextRequestsStub = nil
	if fake.nextRequestsReturnsOnCall == nil {
		fake.nextRequestsReturnsOnCall = make(map[int]struct {
			result1 [][]byte
		})
	}
	fake.nextRequestsReturnsOnCall[i] = struct {
		result1 [][]byte
	}{result1}
}

func (fake *FakeMemPool) RemoveRequests(arg1 ...string) {
	fake.removeRequestsMutex.Lock()
	fake.removeRequestsArgsForCall = append(fake.removeRequestsArgsForCall, struct {
		arg1 []string
	}{arg1})
	stub := fake.RemoveRequestsStub
	fake.recordInvocation("RemoveRequests", []interface{}{arg1})
	fake.removeRequestsMutex.Unlock()
	if stub != nil {
		fake.RemoveRequestsStub(arg1...)
	}
}

func (fake *FakeMemPool) RemoveRequestsCallCount() int {
	fake.removeRequestsMutex.RLock()
	defer fake.removeRequestsMutex.RUnlock()
	return len(fake.removeRequestsArgsForCall)
}

func (fake *FakeMemPool) RemoveRequestsCalls(stub func(...string)) {
	fake.removeRequestsMutex.Lock()
	defer fake.removeRequestsMutex.Unlock()
	fake.RemoveRequestsStub = stub
}

func (fake *FakeMemPool) RemoveRequestsArgsForCall(i int) []string {
	fake.removeRequestsMutex.RLock()
	defer fake.removeRequestsMutex.RUnlock()
	argsForCall := fake.removeRequestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMemPool) Restart(arg1 bool) {
	fake.restartMutex.Lock()
	fake.restartArgsForCall = append(fake.restartArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.RestartStub
	fake.recordInvocation("Restart", []interface{}{arg1})
	fake.restartMutex.Unlock()
	if stub != nil {
		fake.RestartStub(arg1)
	}
}

func (fake *FakeMemPool) RestartCallCount() int {
	fake.restartMutex.RLock()
	defer fake.restartMutex.RUnlock()
	return len(fake.restartArgsForCall)
}

func (fake *FakeMemPool) RestartCalls(stub func(bool)) {
	fake.restartMutex.Lock()
	defer fake.restartMutex.Unlock()
	fake.RestartStub = stub
}

func (fake *FakeMemPool) RestartArgsForCall(i int) bool {
	fake.restartMutex.RLock()
	defer fake.restartMutex.RUnlock()
	argsForCall := fake.restartArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMemPool) Submit(arg1 []byte) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.submitMutex.Lock()
	ret, specificReturn := fake.submitReturnsOnCall[len(fake.submitArgsForCall)]
	fake.submitArgsForCall = append(fake.submitArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.SubmitStub
	fakeReturns := fake.submitReturns
	fake.recordInvocation("Submit", []interface{}{arg1Copy})
	fake.submitMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMemPool) SubmitCallCount() int {
	fake.submitMutex.RLock()
	defer fake.submitMutex.RUnlock()
	return len(fake.submitArgsForCall)
}

func (fake *FakeMemPool) SubmitCalls(stub func([]byte) error) {
	fake.submitMutex.Lock()
	defer fake.submitMutex.Unlock()
	fake.SubmitStub = stub
}

func (fake *FakeMemPool) SubmitArgsForCall(i int) []byte {
	fake.submitMutex.RLock()
	defer fake.submitMutex.RUnlock()
	argsForCall := fake.submitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMemPool) SubmitReturns(result1 error) {
	fake.submitMutex.Lock()
	defer fake.submitMutex.Unlock()
	fake.SubmitStub = nil
	fake.submitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMemPool) SubmitReturnsOnCall(i int, result1 error) {
	fake.submitMutex.Lock()
	defer fake.submitMutex.Unlock()
	fake.SubmitStub = nil
	if fake.submitReturnsOnCall == nil {
		fake.submitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.submitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMemPool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMemPool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ batcher.MemPool = new(FakeMemPool)
