//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.4
// source: node/protos/comm/communication.proto

package comm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubmitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ReqID   []byte `protobuf:"bytes,2,opt,name=reqID,proto3" json:"reqID,omitempty"`
	TraceId []byte `protobuf:"bytes,3,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *SubmitResponse) Reset() {
	*x = SubmitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_protos_comm_communication_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitResponse) ProtoMessage() {}

func (x *SubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_protos_comm_communication_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitResponse.ProtoReflect.Descriptor instead.
func (*SubmitResponse) Descriptor() ([]byte, []int) {
	return file_node_protos_comm_communication_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SubmitResponse) GetReqID() []byte {
	if x != nil {
		return x.ReqID
	}
	return nil
}

func (x *SubmitResponse) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload    []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature  []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Identity   []byte `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	IdentityId uint32 `protobuf:"varint,4,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	TraceId    []byte `protobuf:"bytes,5,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_protos_comm_communication_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_node_protos_comm_communication_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_node_protos_comm_communication_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Request) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Request) GetIdentity() []byte {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Request) GetIdentityId() uint32 {
	if x != nil {
		return x.IdentityId
	}
	return 0
}

func (x *Request) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_protos_comm_communication_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_protos_comm_communication_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_node_protos_comm_communication_proto_rawDescGZIP(), []int{2}
}

func (x *EventResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_protos_comm_communication_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_node_protos_comm_communication_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_node_protos_comm_communication_proto_rawDescGZIP(), []int{3}
}

func (x *Event) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shard uint32 `protobuf:"varint,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Seq   uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_protos_comm_communication_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_node_protos_comm_communication_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_node_protos_comm_communication_proto_rawDescGZIP(), []int{4}
}

func (x *Ack) GetShard() uint32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *Ack) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type AckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_protos_comm_communication_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_protos_comm_communication_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_node_protos_comm_communication_proto_rawDescGZIP(), []int{5}
}

func (x *AckResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FwdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []byte `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *FwdRequest) Reset() {
	*x = FwdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_protos_comm_communication_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FwdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FwdRequest) ProtoMessage() {}

func (x *FwdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_protos_comm_communication_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FwdRequest.ProtoReflect.Descriptor instead.
func (*FwdRequest) Descriptor() ([]byte, []int) {
	return file_node_protos_comm_communication_proto_rawDescGZIP(), []int{6}
}

func (x *FwdRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type FwdRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FwdRequestResponse) Reset() {
	*x = FwdRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_protos_comm_communication_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FwdRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FwdRequestResponse) ProtoMessage() {}

func (x *FwdRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_protos_comm_communication_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FwdRequestResponse.ProtoReflect.Descriptor instead.
func (*FwdRequestResponse) Descriptor() ([]byte, []int) {
	return file_node_protos_comm_communication_proto_rawDescGZIP(), []int{7}
}

func (x *FwdRequestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_node_protos_comm_communication_proto protoreflect.FileDescriptor

var file_node_protos_comm_communication_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x57, 0x0a, 0x0e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x25, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x21, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2d, 0x0a, 0x03, 0x41,
	0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x23, 0x0a, 0x0b, 0x41, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x26, 0x0a, 0x0a, 0x46, 0x77, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x12, 0x46, 0x77, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x32, 0x79, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x32, 0x40,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x32, 0x8a, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x41, 0x63, 0x6b, 0x12, 0x09, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x41,
	0x63, 0x6b, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x10, 0x46, 0x77, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x46, 0x77, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x46, 0x77, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3a, 0x5a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x78,
	0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_node_protos_comm_communication_proto_rawDescOnce sync.Once
	file_node_protos_comm_communication_proto_rawDescData = file_node_protos_comm_communication_proto_rawDesc
)

func file_node_protos_comm_communication_proto_rawDescGZIP() []byte {
	file_node_protos_comm_communication_proto_rawDescOnce.Do(func() {
		file_node_protos_comm_communication_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_protos_comm_communication_proto_rawDescData)
	})
	return file_node_protos_comm_communication_proto_rawDescData
}

var file_node_protos_comm_communication_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_node_protos_comm_communication_proto_goTypes = []interface{}{
	(*SubmitResponse)(nil),     // 0: comm.SubmitResponse
	(*Request)(nil),            // 1: comm.Request
	(*EventResponse)(nil),      // 2: comm.EventResponse
	(*Event)(nil),              // 3: comm.Event
	(*Ack)(nil),                // 4: comm.Ack
	(*AckResponse)(nil),        // 5: comm.AckResponse
	(*FwdRequest)(nil),         // 6: comm.FwdRequest
	(*FwdRequestResponse)(nil), // 7: comm.FwdRequestResponse
}
var file_node_protos_comm_communication_proto_depIdxs = []int32{
	1, // 0: comm.RequestTransmit.Submit:input_type -> comm.Request
	1, // 1: comm.RequestTransmit.SubmitStream:input_type -> comm.Request
	3, // 2: comm.Consensus.NotifyEvent:input_type -> comm.Event
	4, // 3: comm.BatcherControlService.NotifyAck:input_type -> comm.Ack
	6, // 4: comm.BatcherControlService.FwdRequestStream:input_type -> comm.FwdRequest
	0, // 5: comm.RequestTransmit.Submit:output_type -> comm.SubmitResponse
	0, // 6: comm.RequestTransmit.SubmitStream:output_type -> comm.SubmitResponse
	2, // 7: comm.Consensus.NotifyEvent:output_type -> comm.EventResponse
	5, // 8: comm.BatcherControlService.NotifyAck:output_type -> comm.AckResponse
	7, // 9: comm.BatcherControlService.FwdRequestStream:output_type -> comm.FwdRequestResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_node_protos_comm_communication_proto_init() }
func file_node_protos_comm_communication_proto_init() {
	if File_node_protos_comm_communication_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_protos_comm_communication_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_protos_comm_communication_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_protos_comm_communication_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_protos_comm_communication_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_protos_comm_communication_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_protos_comm_communication_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_protos_comm_communication_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FwdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_protos_comm_communication_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FwdRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_protos_comm_communication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_node_protos_comm_communication_proto_goTypes,
		DependencyIndexes: file_node_protos_comm_communication_proto_depIdxs,
		MessageInfos:      file_node_protos_comm_communication_proto_msgTypes,
	}.Build()
	File_node_protos_comm_communication_proto = out.File
	file_node_protos_comm_communication_proto_rawDesc = nil
	file_node_protos_comm_communication_proto_goTypes = nil
	file_node_protos_comm_communication_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RequestTransmitClient is the client API for RequestTransmit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RequestTransmitClient interface {
	Submit(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SubmitResponse, error)
	SubmitStream(ctx context.Context, opts ...grpc.CallOption) (RequestTransmit_SubmitStreamClient, error)
}

type requestTransmitClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestTransmitClient(cc grpc.ClientConnInterface) RequestTransmitClient {
	return &requestTransmitClient{cc}
}

func (c *requestTransmitClient) Submit(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/comm.RequestTransmit/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestTransmitClient) SubmitStream(ctx context.Context, opts ...grpc.CallOption) (RequestTransmit_SubmitStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RequestTransmit_serviceDesc.Streams[0], "/comm.RequestTransmit/SubmitStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &requestTransmitSubmitStreamClient{stream}
	return x, nil
}

type RequestTransmit_SubmitStreamClient interface {
	Send(*Request) error
	Recv() (*SubmitResponse, error)
	grpc.ClientStream
}

type requestTransmitSubmitStreamClient struct {
	grpc.ClientStream
}

func (x *requestTransmitSubmitStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *requestTransmitSubmitStreamClient) Recv() (*SubmitResponse, error) {
	m := new(SubmitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RequestTransmitServer is the server API for RequestTransmit service.
type RequestTransmitServer interface {
	Submit(context.Context, *Request) (*SubmitResponse, error)
	SubmitStream(RequestTransmit_SubmitStreamServer) error
}

// UnimplementedRequestTransmitServer can be embedded to have forward compatible implementations.
type UnimplementedRequestTransmitServer struct {
}

func (*UnimplementedRequestTransmitServer) Submit(context.Context, *Request) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (*UnimplementedRequestTransmitServer) SubmitStream(RequestTransmit_SubmitStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitStream not implemented")
}

func RegisterRequestTransmitServer(s *grpc.Server, srv RequestTransmitServer) {
	s.RegisterService(&_RequestTransmit_serviceDesc, srv)
}

func _RequestTransmit_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestTransmitServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.RequestTransmit/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestTransmitServer).Submit(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestTransmit_SubmitStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RequestTransmitServer).SubmitStream(&requestTransmitSubmitStreamServer{stream})
}

type RequestTransmit_SubmitStreamServer interface {
	Send(*SubmitResponse) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type requestTransmitSubmitStreamServer struct {
	grpc.ServerStream
}

func (x *requestTransmitSubmitStreamServer) Send(m *SubmitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *requestTransmitSubmitStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RequestTransmit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.RequestTransmit",
	HandlerType: (*RequestTransmitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _RequestTransmit_Submit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitStream",
			Handler:       _RequestTransmit_SubmitStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "node/protos/comm/communication.proto",
}

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsensusClient interface {
	NotifyEvent(ctx context.Context, opts ...grpc.CallOption) (Consensus_NotifyEventClient, error)
}

type consensusClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusClient(cc grpc.ClientConnInterface) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) NotifyEvent(ctx context.Context, opts ...grpc.CallOption) (Consensus_NotifyEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consensus_serviceDesc.Streams[0], "/comm.Consensus/NotifyEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusNotifyEventClient{stream}
	return x, nil
}

type Consensus_NotifyEventClient interface {
	Send(*Event) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type consensusNotifyEventClient struct {
	grpc.ClientStream
}

func (x *consensusNotifyEventClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consensusNotifyEventClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsensusServer is the server API for Consensus service.
type ConsensusServer interface {
	NotifyEvent(Consensus_NotifyEventServer) error
}

// UnimplementedConsensusServer can be embedded to have forward compatible implementations.
type UnimplementedConsensusServer struct {
}

func (*UnimplementedConsensusServer) NotifyEvent(Consensus_NotifyEventServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyEvent not implemented")
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_NotifyEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsensusServer).NotifyEvent(&consensusNotifyEventServer{stream})
}

type Consensus_NotifyEventServer interface {
	Send(*EventResponse) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type consensusNotifyEventServer struct {
	grpc.ServerStream
}

func (x *consensusNotifyEventServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consensusNotifyEventServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyEvent",
			Handler:       _Consensus_NotifyEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "node/protos/comm/communication.proto",
}

// BatcherControlServiceClient is the client API for BatcherControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BatcherControlServiceClient interface {
	NotifyAck(ctx context.Context, opts ...grpc.CallOption) (BatcherControlService_NotifyAckClient, error)
	FwdRequestStream(ctx context.Context, opts ...grpc.CallOption) (BatcherControlService_FwdRequestStreamClient, error)
}

type batcherControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatcherControlServiceClient(cc grpc.ClientConnInterface) BatcherControlServiceClient {
	return &batcherControlServiceClient{cc}
}

func (c *batcherControlServiceClient) NotifyAck(ctx context.Context, opts ...grpc.CallOption) (BatcherControlService_NotifyAckClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BatcherControlService_serviceDesc.Streams[0], "/comm.BatcherControlService/NotifyAck", opts...)
	if err != nil {
		return nil, err
	}
	x := &batcherControlServiceNotifyAckClient{stream}
	return x, nil
}

type BatcherControlService_NotifyAckClient interface {
	Send(*Ack) error
	Recv() (*AckResponse, error)
	grpc.ClientStream
}

type batcherControlServiceNotifyAckClient struct {
	grpc.ClientStream
}

func (x *batcherControlServiceNotifyAckClient) Send(m *Ack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *batcherControlServiceNotifyAckClient) Recv() (*AckResponse, error) {
	m := new(AckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *batcherControlServiceClient) FwdRequestStream(ctx context.Context, opts ...grpc.CallOption) (BatcherControlService_FwdRequestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BatcherControlService_serviceDesc.Streams[1], "/comm.BatcherControlService/FwdRequestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &batcherControlServiceFwdRequestStreamClient{stream}
	return x, nil
}

type BatcherControlService_FwdRequestStreamClient interface {
	Send(*FwdRequest) error
	Recv() (*FwdRequestResponse, error)
	grpc.ClientStream
}

type batcherControlServiceFwdRequestStreamClient struct {
	grpc.ClientStream
}

func (x *batcherControlServiceFwdRequestStreamClient) Send(m *FwdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *batcherControlServiceFwdRequestStreamClient) Recv() (*FwdRequestResponse, error) {
	m := new(FwdRequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatcherControlServiceServer is the server API for BatcherControlService service.
type BatcherControlServiceServer interface {
	NotifyAck(BatcherControlService_NotifyAckServer) error
	FwdRequestStream(BatcherControlService_FwdRequestStreamServer) error
}

// UnimplementedBatcherControlServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBatcherControlServiceServer struct {
}

func (*UnimplementedBatcherControlServiceServer) NotifyAck(BatcherControlService_NotifyAckServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyAck not implemented")
}
func (*UnimplementedBatcherControlServiceServer) FwdRequestStream(BatcherControlService_FwdRequestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FwdRequestStream not implemented")
}

func RegisterBatcherControlServiceServer(s *grpc.Server, srv BatcherControlServiceServer) {
	s.RegisterService(&_BatcherControlService_serviceDesc, srv)
}

func _BatcherControlService_NotifyAck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatcherControlServiceServer).NotifyAck(&batcherControlServiceNotifyAckServer{stream})
}

type BatcherControlService_NotifyAckServer interface {
	Send(*AckResponse) error
	Recv() (*Ack, error)
	grpc.ServerStream
}

type batcherControlServiceNotifyAckServer struct {
	grpc.ServerStream
}

func (x *batcherControlServiceNotifyAckServer) Send(m *AckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *batcherControlServiceNotifyAckServer) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BatcherControlService_FwdRequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatcherControlServiceServer).FwdRequestStream(&batcherControlServiceFwdRequestStreamServer{stream})
}

type BatcherControlService_FwdRequestStreamServer interface {
	Send(*FwdRequestResponse) error
	Recv() (*FwdRequest, error)
	grpc.ServerStream
}

type batcherControlServiceFwdRequestStreamServer struct {
	grpc.ServerStream
}

func (x *batcherControlServiceFwdRequestStreamServer) Send(m *FwdRequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *batcherControlServiceFwdRequestStreamServer) Recv() (*FwdRequest, error) {
	m := new(FwdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BatcherControlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.BatcherControlService",
	HandlerType: (*BatcherControlServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyAck",
			Handler:       _BatcherControlService_NotifyAck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FwdRequestStream",
			Handler:       _BatcherControlService_FwdRequestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "node/protos/comm/communication.proto",
}
