// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/node/ledger"

	"github.com/hyperledger/fabric-protos-go-apiv2/common"
)

type FakeAppendListener struct {
	OnAppendStub        func(*common.Block)
	onAppendMutex       sync.RWMutex
	onAppendArgsForCall []struct {
		arg1 *common.Block
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppendListener) OnAppend(arg1 *common.Block) {
	fake.onAppendMutex.Lock()
	fake.onAppendArgsForCall = append(fake.onAppendArgsForCall, struct {
		arg1 *common.Block
	}{arg1})
	fake.recordInvocation("OnAppend", []interface{}{arg1})
	fake.onAppendMutex.Unlock()
	if fake.OnAppendStub != nil {
		fake.OnAppendStub(arg1)
	}
}

func (fake *FakeAppendListener) OnAppendCallCount() int {
	fake.onAppendMutex.RLock()
	defer fake.onAppendMutex.RUnlock()
	return len(fake.onAppendArgsForCall)
}

func (fake *FakeAppendListener) OnAppendCalls(stub func(*common.Block)) {
	fake.onAppendMutex.Lock()
	defer fake.onAppendMutex.Unlock()
	fake.OnAppendStub = stub
}

func (fake *FakeAppendListener) OnAppendArgsForCall(i int) *common.Block {
	fake.onAppendMutex.RLock()
	defer fake.onAppendMutex.RUnlock()
	argsForCall := fake.onAppendArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAppendListener) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onAppendMutex.RLock()
	defer fake.onAppendMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppendListener) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ledger.AppendListener = new(FakeAppendListener)
