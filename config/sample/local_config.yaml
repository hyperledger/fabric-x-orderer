# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

################################################################################
#
#    Arma Node Configuration Template
#
#   - This controls the type and configuration of an Arma node.
#   - Each node role - Router / Batcher / Consensus / Assembler - selects the
#     relevant information for it from the role specific configuration section below.
#
################################################################################

# PartyID a unique identifier for each Arma party, uint16, id>0
PartyID: 1

################################################################################
#
#   SECTION: General
#
################################################################################
General:
  # Listen address: The IP on which to bind to listen.
  ListenAddress: 127.0.0.1

  # Listen port: The port on which to bind to listen.
  ListenPort: 7050

  # TLS: TLS settings for the GRPC server.
  TLS:
    # Require server-side TLS
    Enabled: false
    # PrivateKey governs the file location of the private key of the TLS certificate.
    PrivateKey: tls/server.key
    # Certificate governs the file location of the server TLS certificate.
    Certificate: tls/server.crt
    # RootCAs contains a list of additional root certificates used for verifying certificates
    # of other orderer nodes during outbound connections.
    # It is not required to be set, but can be used to augment the set of TLS CA certificates
    # available from the MSPs of each channel’s configuration.
    RootCAs:
      - tls/ca.crt
    # Require client certificates / mutual TLS for inbound connections.
    ClientAuthRequired: false
    # If mutual TLS is enabled, ClientRootCAs contains a list of additional root certificates
    # used for verifying certificates of client connections.
    # It is not required to be set, but can be used to augment the set of TLS CA certificates
    # available from the MSPs of each channel’s configuration.
    ClientRootCAs:
  # Keepalive settings for the GRPC server.
  Keepalive:
    # ServerMinInterval is the minimum permitted time between client pings.
    # If clients send pings more frequently, the server will
    # disconnect them.
    ServerMinInterval: 60s
    # ServerInterval is the time between pings to clients.
    ServerInterval: 7200s
    # ServerTimeout is the duration the server waits for a response from
    # a client before closing the connection.
    ServerTimeout: 20s
  # Config defines the configuration options for backoff GRPC client.
  Backoff:
    # BaseDelay is the amount of time to backoff after the first failure.
    BaseDelay: 1s
    # Multiplier is the factor with which to multiply backoffs after a
    # failed retry. Should ideally be greater than 1.
    Multiplier: 1.6
    # MaxDelay is the upper bound of backoff delay.
    MaxDelay: 2m

  # Since all nodes should be consistent it is recommended to keep
  # the default value of 100MB for MaxRecvMsgSize & MaxSendMsgSize
  # Max message size in bytes the GRPC server and client can receive
  MaxRecvMsgSize: 104857600
  # Max message size in bytes the GRPC server and client can send
  MaxSendMsgSize: 104857600

  # Bootstrap: how to obtain the bootstrap configuration.
  Bootstrap:
    # Method: The method by which to obtain the bootstrap configuration. The option can be one of:
    #   "block" - path to a file containing the genesis block or config block
    #   "yaml" - path to a file containing a YAML boostrap configuration (see: ./shared_config.yaml).
    Method: block
    # File: The file containing the bootstrap configuration.
    # The bootstrap file can be the genesis block, and it can also be
    # a config block for late bootstrap.
    File: path/to/genesis-block

  # Cluster settings for ordering service nodes that communicate with other ordering service nodes.
  Cluster:
    # SendBufferSize is the maximum number of messages in the egress buffer.
    # Consensus messages are dropped if the buffer is full, and transaction
    # messages are waiting for space to be freed.
    SendBufferSize: 100

    # ClientCertificate governs the file location of the client TLS certificate
    # used to establish mutual TLS connections with other ordering service nodes.
    # If not set, the server General.TLS.Certificate is re-used.
    ClientCertificate:
    # ClientPrivateKey governs the file location of the private key of the client TLS certificate.
    # If not set, the server General.TLS.PrivateKey is re-used.
    ClientPrivateKey:

    # ReplicationPolicy defines how blocks are replicated between orderers.
    # TBD
    ReplicationPolicy:

  # LocalMSPDir is where to find the private crypto material needed by the
  # orderer. It is set relative here as a default for dev environments but
  # should be changed to the real location in production.
  # Specifically:
  # <msp>/keystore - should contain the private signing key
  # <msp>/signcerts - should contain the public key (or cert)
  # See: https://hyperledger-fabric.readthedocs.io/en/latest/membership/membership.html
  LocalMSPDir: msp

  # LocalMSPID is the identity to register the local MSP material with the MSP
  # manager. The sample organization defined in the
  # sample configuration provided has an MSP ID of "SampleOrg".
  LocalMSPID: OrdererOrg

  # BCCSP configures the blockchain crypto service providers.
  BCCSP:
    # Default specifies the preferred blockchain crypto service provider
    # to use. If the preferred provider is not available, the software
    # based provider ("SW") will be used.
    # Valid providers are:
    #  - SW: a software based crypto provider
    #  - PKCS11: a CA hardware security module crypto provider.
    Default: SW

    # SW configures the software based blockchain crypto provider.
    SW:
      # TODO: The default Hash and Security level needs refactoring to be
      # fully configurable. Changing these defaults requires coordination
      # SHA2 is hardcoded in several places, not only BCCSP
      Hash: SHA2
      Security: 256
      # Location of key store. If this is unset, a location will be
      # chosen using: 'LocalMSPDir'/keystore
      FileKeyStore:
        KeyStore:

    # Settings for the PKCS#11 crypto provider (i.e. when DEFAULT: PKCS11)
    PKCS11:
      # Location of the PKCS11 module library
      Library:
      # Token Label
      Label:
      # User PIN
      Pin:
      Hash:
      Security:
      FileKeyStore:
        KeyStore:

  # LogSpec controls the logging level of the server.
  # See: https://hyperledger-fabric.readthedocs.io/en/release-2.5/logging-control.html
  LogSpec: info

################################################################################
#
#   SECTION: File Store
#
#   - This section applies to the configuration of the file store.
#
################################################################################
FileStore:
  # Location: The directory to store data in, e.g. the blocks and databases.
  Location: /var/dec-trust/production/orderer/store

################################################################################
#
#   SECTION: Role specific configuration
#
################################################################################

# Router specific parameters
Router:
  NumberOfConnectionsPerBatcher: 10
  NumberOfStreamsPerConnection: 20

# Consensus specific parameters
Consensus:
  # WALDir specifies the location at which Write Ahead Logs for SmartBFT are
  # stored. Each channel will have its own subdir named after channel ID.
  WALDir: /var/dec-trust/production/orderer/smartbft/wal

# Batcher specific parameters
Batcher:
  # ShardID a unique identifier for each Arma shard; uint16, MaxUint16> id >0.
  ShardID: 1
  # Gap is the maximal distance the primary allows between his own current batch sequence and the secondaries sequence.
  # The secondaries send acknowledgments over each batch to the primary, the primary collects these acknowledgments and waits until at least a threshold of secondaries are not too far behind (batch sequence distance is less than a gap) before the primary continues on to the next batch.
  BatchSequenceGap: 10
  # MemPoolMaxSize is the maximal number of requests permitted in the requests pool.
  MemPoolMaxSize: 1000000
  # SubmitTimeout the time a client can wait for the submission of a single request into the request pool.
  SubmitTimeout: 500ms

# Assembler specific parameters
Assembler:
  PrefetchBufferMemoryBytes: 1073741824
  LedgerScanTimeout: 5s
  EvictionTtlL: 1h
  PopWaitMonitorTimeout: 1s
  ReplicationChannelSize: 100
  BatchRequestsChannelSize: 1000
